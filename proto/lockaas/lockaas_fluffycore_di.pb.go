// Code generated by protoc-gen-go-fluffycore-di. DO NOT EDIT.
// Code generated grpcGateway

package lockaas

import (
	context "context"
	fluffy_dozm_di "github.com/fluffy-bunny/fluffy-dozm-di"
	endpoint "github.com/fluffy-bunny/fluffycore/contracts/endpoint"
	dicontext "github.com/fluffy-bunny/fluffycore/middleware/dicontext"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	grpc "google.golang.org/grpc"
)

// IFluffyCoreLockaasServer defines the grpc server
type IFluffyCoreLockaasServer interface {
	LockaasServer
}

type UnimplementedFluffyCoreLockaasServerEndpointRegistration struct {
}

func (UnimplementedFluffyCoreLockaasServerEndpointRegistration) RegisterFluffyCoreHandler(gwmux *runtime.ServeMux, conn *grpc.ClientConn) {
}

// LockaasFluffyCoreServer defines the grpc server truct
type LockaasFluffyCoreServer struct {
	UnimplementedLockaasServer
	UnimplementedFluffyCoreLockaasServerEndpointRegistration
}

// RegisterFluffyCoreGRPCService the server with grpc
func (srv *LockaasFluffyCoreServer) RegisterFluffyCoreGRPCService(s *grpc.Server) {
	RegisterLockaasServer(s, srv)
}

// AddLockaasServerWithExternalRegistration adds the fluffycore aware grpc server and external registration service.  Mainly used for grpc-gateway
func AddLockaasServerWithExternalRegistration(cb fluffy_dozm_di.ContainerBuilder, ctor any, register func() endpoint.IEndpointRegistration) {
	fluffy_dozm_di.AddSingleton[endpoint.IEndpointRegistration](cb, register)
	fluffy_dozm_di.AddScoped[IFluffyCoreLockaasServer](cb, ctor)
}

// AddLockaasServer adds the fluffycore aware grpc server
func AddLockaasServer(cb fluffy_dozm_di.ContainerBuilder, ctor any) {
	AddLockaasServerWithExternalRegistration(cb, ctor, func() endpoint.IEndpointRegistration {
		return &LockaasFluffyCoreServer{}
	})
}

// ExclusiveLock...
func (s *LockaasFluffyCoreServer) ExclusiveLock(ctx context.Context, request *ExclusiveLockRequest) (*ExclusiveLockResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreLockaasServer](requestContainer)
	return downstreamService.ExclusiveLock(ctx, request)
}

// Renew...
func (s *LockaasFluffyCoreServer) Renew(ctx context.Context, request *RenewRequest) (*RenewResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreLockaasServer](requestContainer)
	return downstreamService.Renew(ctx, request)
}

// SharedLock...
func (s *LockaasFluffyCoreServer) SharedLock(ctx context.Context, request *SharedLockRequest) (*SharedLockResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreLockaasServer](requestContainer)
	return downstreamService.SharedLock(ctx, request)
}

// Status...
func (s *LockaasFluffyCoreServer) Status(ctx context.Context, request *StatusRequest) (*StatusResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreLockaasServer](requestContainer)
	return downstreamService.Status(ctx, request)
}

// Unlock...
func (s *LockaasFluffyCoreServer) Unlock(ctx context.Context, request *UnlockRequest) (*UnlockResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreLockaasServer](requestContainer)
	return downstreamService.Unlock(ctx, request)
}
