// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/lockaas/lockaas.proto

package lockaas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Lockaas_ExclusiveLock_FullMethodName = "/helloworld.Lockaas/ExclusiveLock"
	Lockaas_Renew_FullMethodName         = "/helloworld.Lockaas/Renew"
	Lockaas_SharedLock_FullMethodName    = "/helloworld.Lockaas/SharedLock"
	Lockaas_Status_FullMethodName        = "/helloworld.Lockaas/Status"
	Lockaas_Unlock_FullMethodName        = "/helloworld.Lockaas/Unlock"
)

// LockaasClient is the client API for Lockaas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LockaasClient interface {
	// ExclusiveLock
	ExclusiveLock(ctx context.Context, in *ExclusiveLockRequest, opts ...grpc.CallOption) (*ExclusiveLockResponse, error)
	// Renew
	Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*RenewResponse, error)
	// SharedLock
	SharedLock(ctx context.Context, in *SharedLockRequest, opts ...grpc.CallOption) (*SharedLockResponse, error)
	// Status
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Unlock
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
}

type lockaasClient struct {
	cc grpc.ClientConnInterface
}

func NewLockaasClient(cc grpc.ClientConnInterface) LockaasClient {
	return &lockaasClient{cc}
}

func (c *lockaasClient) ExclusiveLock(ctx context.Context, in *ExclusiveLockRequest, opts ...grpc.CallOption) (*ExclusiveLockResponse, error) {
	out := new(ExclusiveLockResponse)
	err := c.cc.Invoke(ctx, Lockaas_ExclusiveLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockaasClient) Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*RenewResponse, error) {
	out := new(RenewResponse)
	err := c.cc.Invoke(ctx, Lockaas_Renew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockaasClient) SharedLock(ctx context.Context, in *SharedLockRequest, opts ...grpc.CallOption) (*SharedLockResponse, error) {
	out := new(SharedLockResponse)
	err := c.cc.Invoke(ctx, Lockaas_SharedLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockaasClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Lockaas_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockaasClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, Lockaas_Unlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LockaasServer is the server API for Lockaas service.
// All implementations must embed UnimplementedLockaasServer
// for forward compatibility
type LockaasServer interface {
	// ExclusiveLock
	ExclusiveLock(context.Context, *ExclusiveLockRequest) (*ExclusiveLockResponse, error)
	// Renew
	Renew(context.Context, *RenewRequest) (*RenewResponse, error)
	// SharedLock
	SharedLock(context.Context, *SharedLockRequest) (*SharedLockResponse, error)
	// Status
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Unlock
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)
	mustEmbedUnimplementedLockaasServer()
}

// UnimplementedLockaasServer must be embedded to have forward compatible implementations.
type UnimplementedLockaasServer struct {
}

func (UnimplementedLockaasServer) ExclusiveLock(context.Context, *ExclusiveLockRequest) (*ExclusiveLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExclusiveLock not implemented")
}
func (UnimplementedLockaasServer) Renew(context.Context, *RenewRequest) (*RenewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Renew not implemented")
}
func (UnimplementedLockaasServer) SharedLock(context.Context, *SharedLockRequest) (*SharedLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedLock not implemented")
}
func (UnimplementedLockaasServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedLockaasServer) Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedLockaasServer) mustEmbedUnimplementedLockaasServer() {}

// UnsafeLockaasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LockaasServer will
// result in compilation errors.
type UnsafeLockaasServer interface {
	mustEmbedUnimplementedLockaasServer()
}

func RegisterLockaasServer(s grpc.ServiceRegistrar, srv LockaasServer) {
	s.RegisterService(&Lockaas_ServiceDesc, srv)
}

func _Lockaas_ExclusiveLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExclusiveLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockaasServer).ExclusiveLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lockaas_ExclusiveLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockaasServer).ExclusiveLock(ctx, req.(*ExclusiveLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lockaas_Renew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockaasServer).Renew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lockaas_Renew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockaasServer).Renew(ctx, req.(*RenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lockaas_SharedLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockaasServer).SharedLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lockaas_SharedLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockaasServer).SharedLock(ctx, req.(*SharedLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lockaas_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockaasServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lockaas_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockaasServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lockaas_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockaasServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lockaas_Unlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockaasServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lockaas_ServiceDesc is the grpc.ServiceDesc for Lockaas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lockaas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Lockaas",
	HandlerType: (*LockaasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExclusiveLock",
			Handler:    _Lockaas_ExclusiveLock_Handler,
		},
		{
			MethodName: "Renew",
			Handler:    _Lockaas_Renew_Handler,
		},
		{
			MethodName: "SharedLock",
			Handler:    _Lockaas_SharedLock_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Lockaas_Status_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _Lockaas_Unlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lockaas/lockaas.proto",
}
